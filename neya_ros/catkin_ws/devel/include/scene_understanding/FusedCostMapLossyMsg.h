// Generated by gencpp from file scene_understanding/FusedCostMapLossyMsg.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_FUSEDCOSTMAPLOSSYMSG_H
#define SCENE_UNDERSTANDING_MESSAGE_FUSEDCOSTMAPLOSSYMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <scene_understanding/MapHeader.h>
#include <std_msgs/String.h>

namespace scene_understanding
{
template <class ContainerAllocator>
struct FusedCostMapLossyMsg_
{
  typedef FusedCostMapLossyMsg_<ContainerAllocator> Type;

  FusedCostMapLossyMsg_()
    : mapheader()
    , uuid()
    , xc(0.0)
    , yc(0.0)
    , cost()  {
    }
  FusedCostMapLossyMsg_(const ContainerAllocator& _alloc)
    : mapheader(_alloc)
    , uuid(_alloc)
    , xc(0.0)
    , yc(0.0)
    , cost(_alloc)  {
  (void)_alloc;
    }



   typedef  ::scene_understanding::MapHeader_<ContainerAllocator>  _mapheader_type;
  _mapheader_type mapheader;

   typedef  ::std_msgs::String_<ContainerAllocator>  _uuid_type;
  _uuid_type uuid;

   typedef double _xc_type;
  _xc_type xc;

   typedef double _yc_type;
  _yc_type yc;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cost_type;
  _cost_type cost;





  typedef boost::shared_ptr< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> const> ConstPtr;

}; // struct FusedCostMapLossyMsg_

typedef ::scene_understanding::FusedCostMapLossyMsg_<std::allocator<void> > FusedCostMapLossyMsg;

typedef boost::shared_ptr< ::scene_understanding::FusedCostMapLossyMsg > FusedCostMapLossyMsgPtr;
typedef boost::shared_ptr< ::scene_understanding::FusedCostMapLossyMsg const> FusedCostMapLossyMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator1> & lhs, const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator2> & rhs)
{
  return lhs.mapheader == rhs.mapheader &&
    lhs.uuid == rhs.uuid &&
    lhs.xc == rhs.xc &&
    lhs.yc == rhs.yc &&
    lhs.cost == rhs.cost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator1> & lhs, const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0836f33df280efa4c6fdc7b6fafbcab2";
  }

  static const char* value(const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0836f33df280efa4ULL;
  static const uint64_t static_value2 = 0xc6fdc7b6fafbcab2ULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/FusedCostMapLossyMsg";
  }

  static const char* value(const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This type is a DTO for the uxi_costmap/FusedCostmap type. The members here\n"
"# should be able to exactly mimic the class's internal structure, without loss\n"
"# of information\n"
"\n"
"scene_understanding/MapHeader mapheader\n"
"std_msgs/String     uuid\n"
"\n"
"# Look at the FusedCostMap class for a definition on what this means\n"
"float64 xc\n"
"float64 yc\n"
"\n"
"# All of these maps are stored in column major format.\n"
"uint8[] cost\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/MapHeader\n"
"Header header\n"
"\n"
"float64 originx\n"
"float64 originy\n"
"\n"
"int32 num_rows\n"
"int32 num_cols\n"
"float64 cell_size\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mapheader);
      stream.next(m.uuid);
      stream.next(m.xc);
      stream.next(m.yc);
      stream.next(m.cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FusedCostMapLossyMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::FusedCostMapLossyMsg_<ContainerAllocator>& v)
  {
    s << indent << "mapheader: ";
    s << std::endl;
    Printer< ::scene_understanding::MapHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.mapheader);
    s << indent << "uuid: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.uuid);
    s << indent << "xc: ";
    Printer<double>::stream(s, indent + "  ", v.xc);
    s << indent << "yc: ";
    Printer<double>::stream(s, indent + "  ", v.yc);
    s << indent << "cost[]" << std::endl;
    for (size_t i = 0; i < v.cost.size(); ++i)
    {
      s << indent << "  cost[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cost[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_FUSEDCOSTMAPLOSSYMSG_H
