// Generated by gencpp from file scene_understanding/BooleanMap.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_BOOLEANMAP_H
#define SCENE_UNDERSTANDING_MESSAGE_BOOLEANMAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scene_understanding
{
template <class ContainerAllocator>
struct BooleanMap_
{
  typedef BooleanMap_<ContainerAllocator> Type;

  BooleanMap_()
    : data_exists()  {
    }
  BooleanMap_(const ContainerAllocator& _alloc)
    : data_exists(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _data_exists_type;
  _data_exists_type data_exists;





  typedef boost::shared_ptr< ::scene_understanding::BooleanMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::BooleanMap_<ContainerAllocator> const> ConstPtr;

}; // struct BooleanMap_

typedef ::scene_understanding::BooleanMap_<std::allocator<void> > BooleanMap;

typedef boost::shared_ptr< ::scene_understanding::BooleanMap > BooleanMapPtr;
typedef boost::shared_ptr< ::scene_understanding::BooleanMap const> BooleanMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::BooleanMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::BooleanMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::BooleanMap_<ContainerAllocator1> & lhs, const ::scene_understanding::BooleanMap_<ContainerAllocator2> & rhs)
{
  return lhs.data_exists == rhs.data_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::BooleanMap_<ContainerAllocator1> & lhs, const ::scene_understanding::BooleanMap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::BooleanMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::BooleanMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::BooleanMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::BooleanMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::BooleanMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::BooleanMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::BooleanMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87a3648defa41ca2572ff6541da77b0b";
  }

  static const char* value(const ::scene_understanding::BooleanMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87a3648defa41ca2ULL;
  static const uint64_t static_value2 = 0x572ff6541da77b0bULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::BooleanMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/BooleanMap";
  }

  static const char* value(const ::scene_understanding::BooleanMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::BooleanMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#MapHeader mapheader\n"
"int8[] data_exists\n"
;
  }

  static const char* value(const ::scene_understanding::BooleanMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::BooleanMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BooleanMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::BooleanMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::BooleanMap_<ContainerAllocator>& v)
  {
    s << indent << "data_exists[]" << std::endl;
    for (size_t i = 0; i < v.data_exists.size(); ++i)
    {
      s << indent << "  data_exists[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data_exists[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_BOOLEANMAP_H
