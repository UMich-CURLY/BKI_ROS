// Generated by gencpp from file scene_understanding/Costmap.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_COSTMAP_H
#define SCENE_UNDERSTANDING_MESSAGE_COSTMAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <scene_understanding/MapHeader.h>
#include <scene_understanding/ConfidenceMap.h>

namespace scene_understanding
{
template <class ContainerAllocator>
struct Costmap_
{
  typedef Costmap_<ContainerAllocator> Type;

  Costmap_()
    : mapheader()
    , cost()
    , updated_cells()
    , confidence_map()  {
    }
  Costmap_(const ContainerAllocator& _alloc)
    : mapheader(_alloc)
    , cost(_alloc)
    , updated_cells(_alloc)
    , confidence_map(_alloc)  {
  (void)_alloc;
    }



   typedef  ::scene_understanding::MapHeader_<ContainerAllocator>  _mapheader_type;
  _mapheader_type mapheader;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cost_type;
  _cost_type cost;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _updated_cells_type;
  _updated_cells_type updated_cells;

   typedef  ::scene_understanding::ConfidenceMap_<ContainerAllocator>  _confidence_map_type;
  _confidence_map_type confidence_map;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_CHANGE)
  #undef NO_CHANGE
#endif
#if defined(_WIN32) && defined(CHANGED)
  #undef CHANGED
#endif

  enum {
    NO_CHANGE = 0,
    CHANGED = 1,
  };


  typedef boost::shared_ptr< ::scene_understanding::Costmap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::Costmap_<ContainerAllocator> const> ConstPtr;

}; // struct Costmap_

typedef ::scene_understanding::Costmap_<std::allocator<void> > Costmap;

typedef boost::shared_ptr< ::scene_understanding::Costmap > CostmapPtr;
typedef boost::shared_ptr< ::scene_understanding::Costmap const> CostmapConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::Costmap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::Costmap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::Costmap_<ContainerAllocator1> & lhs, const ::scene_understanding::Costmap_<ContainerAllocator2> & rhs)
{
  return lhs.mapheader == rhs.mapheader &&
    lhs.cost == rhs.cost &&
    lhs.updated_cells == rhs.updated_cells &&
    lhs.confidence_map == rhs.confidence_map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::Costmap_<ContainerAllocator1> & lhs, const ::scene_understanding::Costmap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::Costmap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::Costmap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::Costmap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::Costmap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::Costmap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::Costmap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::Costmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9acced72310966aa2bc4a0a7a5019bf8";
  }

  static const char* value(const ::scene_understanding::Costmap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9acced72310966aaULL;
  static const uint64_t static_value2 = 0x2bc4a0a7a5019bf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::Costmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/Costmap";
  }

  static const char* value(const ::scene_understanding::Costmap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::Costmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MapHeader mapheader\n"
"uint8[] cost\n"
"\n"
"#Enum for type of update\n"
"int8 NO_CHANGE = 0\n"
"int8 CHANGED   = 1\n"
"int8[] updated_cells\n"
"\n"
"ConfidenceMap confidence_map\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/MapHeader\n"
"Header header\n"
"\n"
"float64 originx\n"
"float64 originy\n"
"\n"
"int32 num_rows\n"
"int32 num_cols\n"
"float64 cell_size\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/ConfidenceMap\n"
"#MapHeader mapheader\n"
"float32[] confidence\n"
;
  }

  static const char* value(const ::scene_understanding::Costmap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::Costmap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mapheader);
      stream.next(m.cost);
      stream.next(m.updated_cells);
      stream.next(m.confidence_map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Costmap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::Costmap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::Costmap_<ContainerAllocator>& v)
  {
    s << indent << "mapheader: ";
    s << std::endl;
    Printer< ::scene_understanding::MapHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.mapheader);
    s << indent << "cost[]" << std::endl;
    for (size_t i = 0; i < v.cost.size(); ++i)
    {
      s << indent << "  cost[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cost[i]);
    }
    s << indent << "updated_cells[]" << std::endl;
    for (size_t i = 0; i < v.updated_cells.size(); ++i)
    {
      s << indent << "  updated_cells[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.updated_cells[i]);
    }
    s << indent << "confidence_map: ";
    s << std::endl;
    Printer< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >::stream(s, indent + "  ", v.confidence_map);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_COSTMAP_H
