// Generated by gencpp from file scene_understanding/DriveByWireState.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_DRIVEBYWIRESTATE_H
#define SCENE_UNDERSTANDING_MESSAGE_DRIVEBYWIRESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace scene_understanding
{
template <class ContainerAllocator>
struct DriveByWireState_
{
  typedef DriveByWireState_<ContainerAllocator> Type;

  DriveByWireState_()
    : header()
    , name()
    , commanded_gear(0)
    , measured_gear(0)
    , mode(0)
    , commanded_steering_perc(0.0)
    , measured_steering_perc(0.0)
    , commanded_gasbrake_perc(0.0)
    , measured_gasbrake_perc(0.0)
    , is_manual(false)  {
    }
  DriveByWireState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , commanded_gear(0)
    , measured_gear(0)
    , mode(0)
    , commanded_steering_perc(0.0)
    , measured_steering_perc(0.0)
    , commanded_gasbrake_perc(0.0)
    , measured_gasbrake_perc(0.0)
    , is_manual(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _commanded_gear_type;
  _commanded_gear_type commanded_gear;

   typedef int32_t _measured_gear_type;
  _measured_gear_type measured_gear;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef double _commanded_steering_perc_type;
  _commanded_steering_perc_type commanded_steering_perc;

   typedef double _measured_steering_perc_type;
  _measured_steering_perc_type measured_steering_perc;

   typedef double _commanded_gasbrake_perc_type;
  _commanded_gasbrake_perc_type commanded_gasbrake_perc;

   typedef double _measured_gasbrake_perc_type;
  _measured_gasbrake_perc_type measured_gasbrake_perc;

   typedef uint8_t _is_manual_type;
  _is_manual_type is_manual;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(REVERSE)
  #undef REVERSE
#endif
#if defined(_WIN32) && defined(NEUTRAL)
  #undef NEUTRAL
#endif
#if defined(_WIN32) && defined(HIGH_GEAR)
  #undef HIGH_GEAR
#endif
#if defined(_WIN32) && defined(LOW_GEAR)
  #undef LOW_GEAR
#endif
#if defined(_WIN32) && defined(CUSTOM)
  #undef CUSTOM
#endif

  enum {
    REVERSE = 0,
    NEUTRAL = 1,
    HIGH_GEAR = 2,
    LOW_GEAR = 3,
    CUSTOM = 4,
  };


  typedef boost::shared_ptr< ::scene_understanding::DriveByWireState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::DriveByWireState_<ContainerAllocator> const> ConstPtr;

}; // struct DriveByWireState_

typedef ::scene_understanding::DriveByWireState_<std::allocator<void> > DriveByWireState;

typedef boost::shared_ptr< ::scene_understanding::DriveByWireState > DriveByWireStatePtr;
typedef boost::shared_ptr< ::scene_understanding::DriveByWireState const> DriveByWireStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::DriveByWireState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::DriveByWireState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::DriveByWireState_<ContainerAllocator1> & lhs, const ::scene_understanding::DriveByWireState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.commanded_gear == rhs.commanded_gear &&
    lhs.measured_gear == rhs.measured_gear &&
    lhs.mode == rhs.mode &&
    lhs.commanded_steering_perc == rhs.commanded_steering_perc &&
    lhs.measured_steering_perc == rhs.measured_steering_perc &&
    lhs.commanded_gasbrake_perc == rhs.commanded_gasbrake_perc &&
    lhs.measured_gasbrake_perc == rhs.measured_gasbrake_perc &&
    lhs.is_manual == rhs.is_manual;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::DriveByWireState_<ContainerAllocator1> & lhs, const ::scene_understanding::DriveByWireState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::DriveByWireState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::DriveByWireState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::DriveByWireState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::DriveByWireState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::DriveByWireState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::DriveByWireState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::DriveByWireState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c127bccc7e2a0a354cd5647b95069bf";
  }

  static const char* value(const ::scene_understanding::DriveByWireState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c127bccc7e2a0a3ULL;
  static const uint64_t static_value2 = 0x54cd5647b95069bfULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::DriveByWireState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/DriveByWireState";
  }

  static const char* value(const ::scene_understanding::DriveByWireState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::DriveByWireState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string name\n"
"\n"
"# These match what is in the uxi_controller/include/uxiController_Enumerations.h\n"
"int32 REVERSE=0\n"
"int32 NEUTRAL=1\n"
"int32 HIGH_GEAR=2\n"
"int32 LOW_GEAR=3\n"
"int32 CUSTOM=4\n"
"\n"
"int32 commanded_gear\n"
"int32 measured_gear\n"
"\n"
"int32 mode\n"
"\n"
"float64 commanded_steering_perc\n"
"float64 measured_steering_perc\n"
"\n"
"float64 commanded_gasbrake_perc\n"
"float64 measured_gasbrake_perc\n"
"\n"
"# Indicates the vehicle is ignoring planner commands due to being under manual operator control.\n"
"bool is_manual\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::scene_understanding::DriveByWireState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::DriveByWireState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.commanded_gear);
      stream.next(m.measured_gear);
      stream.next(m.mode);
      stream.next(m.commanded_steering_perc);
      stream.next(m.measured_steering_perc);
      stream.next(m.commanded_gasbrake_perc);
      stream.next(m.measured_gasbrake_perc);
      stream.next(m.is_manual);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriveByWireState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::DriveByWireState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::DriveByWireState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "commanded_gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.commanded_gear);
    s << indent << "measured_gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.measured_gear);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "commanded_steering_perc: ";
    Printer<double>::stream(s, indent + "  ", v.commanded_steering_perc);
    s << indent << "measured_steering_perc: ";
    Printer<double>::stream(s, indent + "  ", v.measured_steering_perc);
    s << indent << "commanded_gasbrake_perc: ";
    Printer<double>::stream(s, indent + "  ", v.commanded_gasbrake_perc);
    s << indent << "measured_gasbrake_perc: ";
    Printer<double>::stream(s, indent + "  ", v.measured_gasbrake_perc);
    s << indent << "is_manual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_manual);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_DRIVEBYWIRESTATE_H
