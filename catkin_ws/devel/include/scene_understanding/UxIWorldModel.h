// Generated by gencpp from file scene_understanding/UxIWorldModel.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_UXIWORLDMODEL_H
#define SCENE_UNDERSTANDING_MESSAGE_UXIWORLDMODEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <scene_understanding/MapHeader.h>
#include <scene_understanding/Costmap.h>
#include <scene_understanding/ElevationMap.h>

namespace scene_understanding
{
template <class ContainerAllocator>
struct UxIWorldModel_
{
  typedef UxIWorldModel_<ContainerAllocator> Type;

  UxIWorldModel_()
    : mapheader()
    , costmap()
    , ground_elevation_map()  {
    }
  UxIWorldModel_(const ContainerAllocator& _alloc)
    : mapheader(_alloc)
    , costmap(_alloc)
    , ground_elevation_map(_alloc)  {
  (void)_alloc;
    }



   typedef  ::scene_understanding::MapHeader_<ContainerAllocator>  _mapheader_type;
  _mapheader_type mapheader;

   typedef  ::scene_understanding::Costmap_<ContainerAllocator>  _costmap_type;
  _costmap_type costmap;

   typedef  ::scene_understanding::ElevationMap_<ContainerAllocator>  _ground_elevation_map_type;
  _ground_elevation_map_type ground_elevation_map;





  typedef boost::shared_ptr< ::scene_understanding::UxIWorldModel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::UxIWorldModel_<ContainerAllocator> const> ConstPtr;

}; // struct UxIWorldModel_

typedef ::scene_understanding::UxIWorldModel_<std::allocator<void> > UxIWorldModel;

typedef boost::shared_ptr< ::scene_understanding::UxIWorldModel > UxIWorldModelPtr;
typedef boost::shared_ptr< ::scene_understanding::UxIWorldModel const> UxIWorldModelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::UxIWorldModel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::UxIWorldModel_<ContainerAllocator1> & lhs, const ::scene_understanding::UxIWorldModel_<ContainerAllocator2> & rhs)
{
  return lhs.mapheader == rhs.mapheader &&
    lhs.costmap == rhs.costmap &&
    lhs.ground_elevation_map == rhs.ground_elevation_map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::UxIWorldModel_<ContainerAllocator1> & lhs, const ::scene_understanding::UxIWorldModel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::UxIWorldModel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::UxIWorldModel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::UxIWorldModel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb62fd2200fd1ee960df6a33acdf4318";
  }

  static const char* value(const ::scene_understanding::UxIWorldModel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb62fd2200fd1ee9ULL;
  static const uint64_t static_value2 = 0x60df6a33acdf4318ULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/UxIWorldModel";
  }

  static const char* value(const ::scene_understanding::UxIWorldModel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MapHeader mapheader\n"
"Costmap costmap\n"
"ElevationMap ground_elevation_map\n"
"#ElevationMap max_elevation_map\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/MapHeader\n"
"Header header\n"
"\n"
"float64 originx\n"
"float64 originy\n"
"\n"
"int32 num_rows\n"
"int32 num_cols\n"
"float64 cell_size\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/Costmap\n"
"MapHeader mapheader\n"
"uint8[] cost\n"
"\n"
"#Enum for type of update\n"
"int8 NO_CHANGE = 0\n"
"int8 CHANGED   = 1\n"
"int8[] updated_cells\n"
"\n"
"ConfidenceMap confidence_map\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/ConfidenceMap\n"
"#MapHeader mapheader\n"
"float32[] confidence\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/ElevationMap\n"
"MapHeader mapheader\n"
"float32[] elevation\n"
"ConfidenceMap confidence_map\n"
"BooleanMap bool_map\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/BooleanMap\n"
"#MapHeader mapheader\n"
"int8[] data_exists\n"
;
  }

  static const char* value(const ::scene_understanding::UxIWorldModel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mapheader);
      stream.next(m.costmap);
      stream.next(m.ground_elevation_map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UxIWorldModel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::UxIWorldModel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::UxIWorldModel_<ContainerAllocator>& v)
  {
    s << indent << "mapheader: ";
    s << std::endl;
    Printer< ::scene_understanding::MapHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.mapheader);
    s << indent << "costmap: ";
    s << std::endl;
    Printer< ::scene_understanding::Costmap_<ContainerAllocator> >::stream(s, indent + "  ", v.costmap);
    s << indent << "ground_elevation_map: ";
    s << std::endl;
    Printer< ::scene_understanding::ElevationMap_<ContainerAllocator> >::stream(s, indent + "  ", v.ground_elevation_map);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_UXIWORLDMODEL_H
