// Generated by gencpp from file scene_understanding/ElevationMap.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_ELEVATIONMAP_H
#define SCENE_UNDERSTANDING_MESSAGE_ELEVATIONMAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <scene_understanding/MapHeader.h>
#include <scene_understanding/ConfidenceMap.h>
#include <scene_understanding/BooleanMap.h>

namespace scene_understanding
{
template <class ContainerAllocator>
struct ElevationMap_
{
  typedef ElevationMap_<ContainerAllocator> Type;

  ElevationMap_()
    : mapheader()
    , elevation()
    , confidence_map()
    , bool_map()  {
    }
  ElevationMap_(const ContainerAllocator& _alloc)
    : mapheader(_alloc)
    , elevation(_alloc)
    , confidence_map(_alloc)
    , bool_map(_alloc)  {
  (void)_alloc;
    }



   typedef  ::scene_understanding::MapHeader_<ContainerAllocator>  _mapheader_type;
  _mapheader_type mapheader;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _elevation_type;
  _elevation_type elevation;

   typedef  ::scene_understanding::ConfidenceMap_<ContainerAllocator>  _confidence_map_type;
  _confidence_map_type confidence_map;

   typedef  ::scene_understanding::BooleanMap_<ContainerAllocator>  _bool_map_type;
  _bool_map_type bool_map;





  typedef boost::shared_ptr< ::scene_understanding::ElevationMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::ElevationMap_<ContainerAllocator> const> ConstPtr;

}; // struct ElevationMap_

typedef ::scene_understanding::ElevationMap_<std::allocator<void> > ElevationMap;

typedef boost::shared_ptr< ::scene_understanding::ElevationMap > ElevationMapPtr;
typedef boost::shared_ptr< ::scene_understanding::ElevationMap const> ElevationMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::ElevationMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::ElevationMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::ElevationMap_<ContainerAllocator1> & lhs, const ::scene_understanding::ElevationMap_<ContainerAllocator2> & rhs)
{
  return lhs.mapheader == rhs.mapheader &&
    lhs.elevation == rhs.elevation &&
    lhs.confidence_map == rhs.confidence_map &&
    lhs.bool_map == rhs.bool_map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::ElevationMap_<ContainerAllocator1> & lhs, const ::scene_understanding::ElevationMap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::ElevationMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::ElevationMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::ElevationMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::ElevationMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::ElevationMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::ElevationMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::ElevationMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f681330e1ad68ab131ebe44e6c923fc";
  }

  static const char* value(const ::scene_understanding::ElevationMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f681330e1ad68abULL;
  static const uint64_t static_value2 = 0x131ebe44e6c923fcULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::ElevationMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/ElevationMap";
  }

  static const char* value(const ::scene_understanding::ElevationMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::ElevationMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MapHeader mapheader\n"
"float32[] elevation\n"
"ConfidenceMap confidence_map\n"
"BooleanMap bool_map\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/MapHeader\n"
"Header header\n"
"\n"
"float64 originx\n"
"float64 originy\n"
"\n"
"int32 num_rows\n"
"int32 num_cols\n"
"float64 cell_size\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/ConfidenceMap\n"
"#MapHeader mapheader\n"
"float32[] confidence\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/BooleanMap\n"
"#MapHeader mapheader\n"
"int8[] data_exists\n"
;
  }

  static const char* value(const ::scene_understanding::ElevationMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::ElevationMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mapheader);
      stream.next(m.elevation);
      stream.next(m.confidence_map);
      stream.next(m.bool_map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElevationMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::ElevationMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::ElevationMap_<ContainerAllocator>& v)
  {
    s << indent << "mapheader: ";
    s << std::endl;
    Printer< ::scene_understanding::MapHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.mapheader);
    s << indent << "elevation[]" << std::endl;
    for (size_t i = 0; i < v.elevation.size(); ++i)
    {
      s << indent << "  elevation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.elevation[i]);
    }
    s << indent << "confidence_map: ";
    s << std::endl;
    Printer< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >::stream(s, indent + "  ", v.confidence_map);
    s << indent << "bool_map: ";
    s << std::endl;
    Printer< ::scene_understanding::BooleanMap_<ContainerAllocator> >::stream(s, indent + "  ", v.bool_map);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_ELEVATIONMAP_H
