// Generated by gencpp from file scene_understanding/SensorCostmap.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_SENSORCOSTMAP_H
#define SCENE_UNDERSTANDING_MESSAGE_SENSORCOSTMAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <scene_understanding/MapHeader.h>

namespace scene_understanding
{
template <class ContainerAllocator>
struct SensorCostmap_
{
  typedef SensorCostmap_<ContainerAllocator> Type;

  SensorCostmap_()
    : mapheader()
    , sigma_x(0.0)
    , sigma_y(0.0)
    , mean_x(0.0)
    , mean_y(0.0)
    , cost()
    , height_avg()
    , height_sum()
    , height_count()
    , num_ground_points()
    , num_obstacle_points()  {
    }
  SensorCostmap_(const ContainerAllocator& _alloc)
    : mapheader(_alloc)
    , sigma_x(0.0)
    , sigma_y(0.0)
    , mean_x(0.0)
    , mean_y(0.0)
    , cost(_alloc)
    , height_avg(_alloc)
    , height_sum(_alloc)
    , height_count(_alloc)
    , num_ground_points(_alloc)
    , num_obstacle_points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::scene_understanding::MapHeader_<ContainerAllocator>  _mapheader_type;
  _mapheader_type mapheader;

   typedef double _sigma_x_type;
  _sigma_x_type sigma_x;

   typedef double _sigma_y_type;
  _sigma_y_type sigma_y;

   typedef double _mean_x_type;
  _mean_x_type mean_x;

   typedef double _mean_y_type;
  _mean_y_type mean_y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _cost_type;
  _cost_type cost;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _height_avg_type;
  _height_avg_type height_avg;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _height_sum_type;
  _height_sum_type height_sum;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _height_count_type;
  _height_count_type height_count;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _num_ground_points_type;
  _num_ground_points_type num_ground_points;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _num_obstacle_points_type;
  _num_obstacle_points_type num_obstacle_points;





  typedef boost::shared_ptr< ::scene_understanding::SensorCostmap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::SensorCostmap_<ContainerAllocator> const> ConstPtr;

}; // struct SensorCostmap_

typedef ::scene_understanding::SensorCostmap_<std::allocator<void> > SensorCostmap;

typedef boost::shared_ptr< ::scene_understanding::SensorCostmap > SensorCostmapPtr;
typedef boost::shared_ptr< ::scene_understanding::SensorCostmap const> SensorCostmapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::SensorCostmap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::SensorCostmap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::SensorCostmap_<ContainerAllocator1> & lhs, const ::scene_understanding::SensorCostmap_<ContainerAllocator2> & rhs)
{
  return lhs.mapheader == rhs.mapheader &&
    lhs.sigma_x == rhs.sigma_x &&
    lhs.sigma_y == rhs.sigma_y &&
    lhs.mean_x == rhs.mean_x &&
    lhs.mean_y == rhs.mean_y &&
    lhs.cost == rhs.cost &&
    lhs.height_avg == rhs.height_avg &&
    lhs.height_sum == rhs.height_sum &&
    lhs.height_count == rhs.height_count &&
    lhs.num_ground_points == rhs.num_ground_points &&
    lhs.num_obstacle_points == rhs.num_obstacle_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::SensorCostmap_<ContainerAllocator1> & lhs, const ::scene_understanding::SensorCostmap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::SensorCostmap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::SensorCostmap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::SensorCostmap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::SensorCostmap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::SensorCostmap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::SensorCostmap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::SensorCostmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "067947cf4710194efd3f47bce3fab1f9";
  }

  static const char* value(const ::scene_understanding::SensorCostmap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x067947cf4710194eULL;
  static const uint64_t static_value2 = 0xfd3f47bce3fab1f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::SensorCostmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/SensorCostmap";
  }

  static const char* value(const ::scene_understanding::SensorCostmap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::SensorCostmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is the type that will transmit a costmap containing information from a sensor.\n"
"#\n"
"# This is used to send into the fusedCostmapGenerator, which will accumulate these costmaps into the fusedCostmap.\n"
"\n"
"# Header for this map.\n"
"# The time is set from the original measurement time.\n"
"scene_understanding/MapHeader mapheader\n"
"\n"
"# Costmap Params\n"
"float64 sigma_x\n"
"float64 sigma_y\n"
"float64 mean_x\n"
"float64 mean_y\n"
"\n"
"# Actual data\n"
"float64[] cost\n"
"float64[] height_avg\n"
"float64[] height_sum\n"
"float64[] height_count\n"
"float64[] num_ground_points\n"
"float64[] num_obstacle_points\n"
"\n"
"\n"
"================================================================================\n"
"MSG: scene_understanding/MapHeader\n"
"Header header\n"
"\n"
"float64 originx\n"
"float64 originy\n"
"\n"
"int32 num_rows\n"
"int32 num_cols\n"
"float64 cell_size\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::scene_understanding::SensorCostmap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::SensorCostmap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mapheader);
      stream.next(m.sigma_x);
      stream.next(m.sigma_y);
      stream.next(m.mean_x);
      stream.next(m.mean_y);
      stream.next(m.cost);
      stream.next(m.height_avg);
      stream.next(m.height_sum);
      stream.next(m.height_count);
      stream.next(m.num_ground_points);
      stream.next(m.num_obstacle_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorCostmap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::SensorCostmap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::SensorCostmap_<ContainerAllocator>& v)
  {
    s << indent << "mapheader: ";
    s << std::endl;
    Printer< ::scene_understanding::MapHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.mapheader);
    s << indent << "sigma_x: ";
    Printer<double>::stream(s, indent + "  ", v.sigma_x);
    s << indent << "sigma_y: ";
    Printer<double>::stream(s, indent + "  ", v.sigma_y);
    s << indent << "mean_x: ";
    Printer<double>::stream(s, indent + "  ", v.mean_x);
    s << indent << "mean_y: ";
    Printer<double>::stream(s, indent + "  ", v.mean_y);
    s << indent << "cost[]" << std::endl;
    for (size_t i = 0; i < v.cost.size(); ++i)
    {
      s << indent << "  cost[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cost[i]);
    }
    s << indent << "height_avg[]" << std::endl;
    for (size_t i = 0; i < v.height_avg.size(); ++i)
    {
      s << indent << "  height_avg[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.height_avg[i]);
    }
    s << indent << "height_sum[]" << std::endl;
    for (size_t i = 0; i < v.height_sum.size(); ++i)
    {
      s << indent << "  height_sum[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.height_sum[i]);
    }
    s << indent << "height_count[]" << std::endl;
    for (size_t i = 0; i < v.height_count.size(); ++i)
    {
      s << indent << "  height_count[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.height_count[i]);
    }
    s << indent << "num_ground_points[]" << std::endl;
    for (size_t i = 0; i < v.num_ground_points.size(); ++i)
    {
      s << indent << "  num_ground_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.num_ground_points[i]);
    }
    s << indent << "num_obstacle_points[]" << std::endl;
    for (size_t i = 0; i < v.num_obstacle_points.size(); ++i)
    {
      s << indent << "  num_obstacle_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.num_obstacle_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_SENSORCOSTMAP_H
