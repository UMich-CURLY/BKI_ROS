// Generated by gencpp from file scene_understanding/ConfidenceMap.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_CONFIDENCEMAP_H
#define SCENE_UNDERSTANDING_MESSAGE_CONFIDENCEMAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scene_understanding
{
template <class ContainerAllocator>
struct ConfidenceMap_
{
  typedef ConfidenceMap_<ContainerAllocator> Type;

  ConfidenceMap_()
    : confidence()  {
    }
  ConfidenceMap_(const ContainerAllocator& _alloc)
    : confidence(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::scene_understanding::ConfidenceMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::ConfidenceMap_<ContainerAllocator> const> ConstPtr;

}; // struct ConfidenceMap_

typedef ::scene_understanding::ConfidenceMap_<std::allocator<void> > ConfidenceMap;

typedef boost::shared_ptr< ::scene_understanding::ConfidenceMap > ConfidenceMapPtr;
typedef boost::shared_ptr< ::scene_understanding::ConfidenceMap const> ConfidenceMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::ConfidenceMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::ConfidenceMap_<ContainerAllocator1> & lhs, const ::scene_understanding::ConfidenceMap_<ContainerAllocator2> & rhs)
{
  return lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::ConfidenceMap_<ContainerAllocator1> & lhs, const ::scene_understanding::ConfidenceMap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::ConfidenceMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::ConfidenceMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::ConfidenceMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1dbbe1023d82ebb797244da71216a266";
  }

  static const char* value(const ::scene_understanding::ConfidenceMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1dbbe1023d82ebb7ULL;
  static const uint64_t static_value2 = 0x97244da71216a266ULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/ConfidenceMap";
  }

  static const char* value(const ::scene_understanding::ConfidenceMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#MapHeader mapheader\n"
"float32[] confidence\n"
;
  }

  static const char* value(const ::scene_understanding::ConfidenceMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfidenceMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::ConfidenceMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::ConfidenceMap_<ContainerAllocator>& v)
  {
    s << indent << "confidence[]" << std::endl;
    for (size_t i = 0; i < v.confidence.size(); ++i)
    {
      s << indent << "  confidence[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.confidence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_CONFIDENCEMAP_H
