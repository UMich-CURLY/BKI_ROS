// Generated by gencpp from file scene_understanding/VoxelValue.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_VOXELVALUE_H
#define SCENE_UNDERSTANDING_MESSAGE_VOXELVALUE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scene_understanding
{
template <class ContainerAllocator>
struct VoxelValue_
{
  typedef VoxelValue_<ContainerAllocator> Type;

  VoxelValue_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , density(0.0)
    , density_confidence(0.0)
    , rgb(0.0)
    , material(0)  {
    }
  VoxelValue_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , density(0.0)
    , density_confidence(0.0)
    , rgb(0.0)
    , material(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef float _density_type;
  _density_type density;

   typedef float _density_confidence_type;
  _density_confidence_type density_confidence;

   typedef float _rgb_type;
  _rgb_type rgb;

   typedef uint8_t _material_type;
  _material_type material;





  typedef boost::shared_ptr< ::scene_understanding::VoxelValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::VoxelValue_<ContainerAllocator> const> ConstPtr;

}; // struct VoxelValue_

typedef ::scene_understanding::VoxelValue_<std::allocator<void> > VoxelValue;

typedef boost::shared_ptr< ::scene_understanding::VoxelValue > VoxelValuePtr;
typedef boost::shared_ptr< ::scene_understanding::VoxelValue const> VoxelValueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::VoxelValue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::VoxelValue_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::VoxelValue_<ContainerAllocator1> & lhs, const ::scene_understanding::VoxelValue_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.density == rhs.density &&
    lhs.density_confidence == rhs.density_confidence &&
    lhs.rgb == rhs.rgb &&
    lhs.material == rhs.material;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::VoxelValue_<ContainerAllocator1> & lhs, const ::scene_understanding::VoxelValue_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::VoxelValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::VoxelValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::VoxelValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::VoxelValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::VoxelValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::VoxelValue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::VoxelValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "803ef880e1818e7bb7eb8eac0ff9f20b";
  }

  static const char* value(const ::scene_understanding::VoxelValue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x803ef880e1818e7bULL;
  static const uint64_t static_value2 = 0xb7eb8eac0ff9f20bULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::VoxelValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/VoxelValue";
  }

  static const char* value(const ::scene_understanding::VoxelValue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::VoxelValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"float32 density\n"
"float32 density_confidence\n"
"\n"
"float32 rgb\n"
"\n"
"uint8 material\n"
;
  }

  static const char* value(const ::scene_understanding::VoxelValue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::VoxelValue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.density);
      stream.next(m.density_confidence);
      stream.next(m.rgb);
      stream.next(m.material);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VoxelValue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::VoxelValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::VoxelValue_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "density: ";
    Printer<float>::stream(s, indent + "  ", v.density);
    s << indent << "density_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.density_confidence);
    s << indent << "rgb: ";
    Printer<float>::stream(s, indent + "  ", v.rgb);
    s << indent << "material: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.material);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_VOXELVALUE_H
