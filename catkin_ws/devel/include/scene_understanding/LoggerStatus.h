// Generated by gencpp from file scene_understanding/LoggerStatus.msg
// DO NOT EDIT!


#ifndef SCENE_UNDERSTANDING_MESSAGE_LOGGERSTATUS_H
#define SCENE_UNDERSTANDING_MESSAGE_LOGGERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scene_understanding
{
template <class ContainerAllocator>
struct LoggerStatus_
{
  typedef LoggerStatus_<ContainerAllocator> Type;

  LoggerStatus_()
    : logging(false)
    , status(0)  {
    }
  LoggerStatus_(const ContainerAllocator& _alloc)
    : logging(false)
    , status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _logging_type;
  _logging_type logging;

   typedef int8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NOMINAL)
  #undef NOMINAL
#endif
#if defined(_WIN32) && defined(CONSOLIDATING)
  #undef CONSOLIDATING
#endif
#if defined(_WIN32) && defined(PARAMETER_ERROR)
  #undef PARAMETER_ERROR
#endif
#if defined(_WIN32) && defined(DIRECTORY_ERROR)
  #undef DIRECTORY_ERROR
#endif
#if defined(_WIN32) && defined(DISK_SPACE_ERROR)
  #undef DISK_SPACE_ERROR
#endif
#if defined(_WIN32) && defined(SYNC_ERROR)
  #undef SYNC_ERROR
#endif

  enum {
    NOMINAL = 0,
    CONSOLIDATING = 1,
    PARAMETER_ERROR = 2,
    DIRECTORY_ERROR = 3,
    DISK_SPACE_ERROR = 4,
    SYNC_ERROR = 5,
  };


  typedef boost::shared_ptr< ::scene_understanding::LoggerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scene_understanding::LoggerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LoggerStatus_

typedef ::scene_understanding::LoggerStatus_<std::allocator<void> > LoggerStatus;

typedef boost::shared_ptr< ::scene_understanding::LoggerStatus > LoggerStatusPtr;
typedef boost::shared_ptr< ::scene_understanding::LoggerStatus const> LoggerStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scene_understanding::LoggerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scene_understanding::LoggerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scene_understanding::LoggerStatus_<ContainerAllocator1> & lhs, const ::scene_understanding::LoggerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.logging == rhs.logging &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scene_understanding::LoggerStatus_<ContainerAllocator1> & lhs, const ::scene_understanding::LoggerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scene_understanding

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::LoggerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scene_understanding::LoggerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::LoggerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scene_understanding::LoggerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::LoggerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scene_understanding::LoggerStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scene_understanding::LoggerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b41f30f09dc0b31930675744564ab05c";
  }

  static const char* value(const ::scene_understanding::LoggerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb41f30f09dc0b319ULL;
  static const uint64_t static_value2 = 0x30675744564ab05cULL;
};

template<class ContainerAllocator>
struct DataType< ::scene_understanding::LoggerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scene_understanding/LoggerStatus";
  }

  static const char* value(const ::scene_understanding::LoggerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scene_understanding::LoggerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Status enum\n"
"int8 NOMINAL=0\n"
"int8 CONSOLIDATING=1\n"
"int8 PARAMETER_ERROR=2\n"
"int8 DIRECTORY_ERROR=3\n"
"int8 DISK_SPACE_ERROR=4\n"
"int8 SYNC_ERROR=5\n"
"\n"
"# Logger Status\n"
"bool logging\n"
"int8 status\n"
;
  }

  static const char* value(const ::scene_understanding::LoggerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scene_understanding::LoggerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.logging);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoggerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scene_understanding::LoggerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scene_understanding::LoggerStatus_<ContainerAllocator>& v)
  {
    s << indent << "logging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.logging);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCENE_UNDERSTANDING_MESSAGE_LOGGERSTATUS_H
